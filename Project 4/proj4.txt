template <class Base>
void AVLTree<Base>::insert(const Base &item){
    vector<AVLNode<Base> *> path; //path from root to insertion

    if(!root){
        root = new AVLNode<Base>(item);
    }
    else{
        AVLNode<Base>* tempParent, *temp = root;
        bool dup = false;

        while(temp != NULL && !dup){
            path.push_back(temp);
            tempParent = temp;

            if(item < temp->getData()){
                temp = temp->left;
            } else if(temp->getData() < item){
                temp = temp->right;
            } else{
                dup = true;
            }
        }

        if(!dup) {
            if (item < tempParent->getData()) {
                tempParent->left = new AVLNode<Base>(item);
            }
            else if(tempParent->getData() < item){
                tempParent->right = new AVLNode<Base>(item);
            }

            for(int i = path.size() - 1; i >= 0; --i){
                path.at(i)->updateHeight();
            }
            this->rebalancePathToRoot(path);

        }
    }
}

template <class Base>
void AVLTree<Base>::remove(const Base &item){
    vector<AVLNode<Base> *> path; //path from root to affected nodes

    if(root != NULL) {
        AVLNode<Base> *toRemove = this->root;
        AVLNode<Base> *parent = toRemove;
        bool notFound = false;

        //Search for item in BST
        while ((toRemove->data < item || item < toRemove->data) && !notFound) {
            path.push_back(toRemove);
            parent = toRemove;
            //Search right in tree
            if (toRemove->data < item) {
                if (toRemove->right != NULL) {
                    toRemove = toRemove->right;
                } else { notFound = true; }
            }
                //Search left in tree
            else if (item < toRemove->data) {
                if (toRemove->left != NULL) {
                    toRemove = toRemove->left;
                } else { notFound = true; }
            }
        }

        if (!notFound) {
            //toRemove is a leaf node
            if (toRemove->right == NULL && toRemove->left == NULL) {
                //solve if parent == root
                if (parent == toRemove) {
                    root = NULL;
                } else if (parent->left == toRemove) {
                    parent->left = NULL;
                } else {
                    parent->right = NULL;
                }
            }
                //toRemove has 1 child
            else if (toRemove->right == NULL || toRemove->left == NULL) {
                //solve if parent == root
                AVLNode<Base> *child = NULL;
                if (toRemove->left != NULL) {
                    child = toRemove->left;
                    toRemove->left = NULL;
                } else {
                    child = toRemove->right;
                    toRemove->right = NULL;
                }
                if (parent == toRemove) {
                    root = child;
                } else if (parent->left == toRemove) {
                    parent->left = child;
                } else {
                    parent->right = child;
                }
            }
                //toRemove has 2 children
            else {
                AVLNode<Base> *leftMost = toRemove->right;
                AVLNode<Base> *leftMostParent = toRemove;
                int ndx = path.size(); //where toRemove is located in the path

                if (leftMost->left != NULL) {
                    while (leftMost->left != NULL) {
                        path.push_back(leftMost);
                        leftMostParent = leftMost;
                        leftMost = leftMost->left;
                    }
                    leftMostParent->left = leftMost->right;
                    leftMost->right = toRemove->right;
                }
                leftMost->left = toRemove->left;

                path.insert(path.begin() + ndx, leftMost);

                if (parent == toRemove) {      //Root = toRemove
                    root = leftMost;
                } else if (parent->left == toRemove) {
                    parent->left = leftMost;
                } else {
                    parent->right = leftMost;
                }
                toRemove->left = toRemove->right = NULL;
            }
            delete toRemove;


            for(int i = path.size() - 1; i >= 0; --i){
                path.at(i)->updateHeight();
            }
            this->rebalancePathToRoot(path);

        }
    }

}

template <class Base>
void AVLTree<Base>::rebalancePathToRoot(vector<AVLNode<Base> *> const &path){

    for(int i = path.size() - 1; i >= 0; --i) {
        AVLNode<Base> *curr = path.at(i), *parent;
        int balance = curr->getHeight(curr->left) - curr->getHeight(curr->right);
        //AVLNode<Base>* parent;

        if (i > 0) { //not at the root
            parent = path.at(i - 1);
        }
        if(abs(balance) > 1) { //check for imbalance

            if (balance > 1) { //left tree is taller
                balance = curr->getHeight(path.at(i)->left->left) -
                          curr->getHeight(path.at(i)->left->right);
                if (balance >= 0) {                 //Left-left imbalance
                    if (0 == i) { //at root
                        this->root = curr->singleRotateRight();
                    } else if (parent->left == path.at(i)) {
                        parent->left = curr->singleRotateRight();
                    } else {
                        parent->right = curr->singleRotateRight();
                    }

                } else if (balance < 0) {               //left-right imbalance
                    if (0 == i) { //at root
                        this->root = curr->doubleRotateLeftRight();
                    } else if (parent->left == path.at(i)) {
                        parent->left = curr->doubleRotateLeftRight();
                    } else {
                        parent->right = curr->doubleRotateLeftRight();
                    }
                }
            } else if (balance < -1) { //right tree is taller
                balance = curr->getHeight(path.at(i)->right->left) -
                          curr->getHeight(path.at(i)->right->right);

                if (balance <= 0) {                                   //right-right imbalance
                    if (0 == i) { //root
                        this->root = path.at(i)->singleRotateLeft();
                    } else if (parent->left == path.at(i)) {
                        parent->left = curr->singleRotateLeft();
                    } else {
                        parent->right = curr->singleRotateLeft();
                    }

                } else if (balance > 0) {                            //right-left imbalance
                    if (0 == i) { //root
                        this->root = path.at(i)->doubleRotateRightLeft();
                    } else if (parent->left == path.at(i)) {
                        parent->left = curr->doubleRotateRightLeft();
                    } else {
                        parent->right = curr->doubleRotateRightLeft();
                    }
                }
            }

            //update heights
            for(int j = path.size() - 1; j >= 0; j--){
                path.at(j)->updateHeight();
            }

        }
    }
}