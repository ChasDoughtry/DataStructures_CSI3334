/*

// Testing process methods

    int n;

    cin >> n;

    Process test[n];

    //test = new Process[n];

    for(int i = 0; i < n; ++i){
        cin >> test[i];
    }

    for(int i = 0; i < n; ++i){
        if (test[i] < test[i+1]){
            cout << "true: " << i << endl;
        }
    }


    ArrayHeap<Process> Tester;

*/

/*

     cin >> total;    //read number of processes
     cin >> *nxtProc; // get first process

               while (total > (procCnt + skipCnt)) {
                //while(total > 0){
                while (nxtProc->getSubmissionTime() <= currTime && !atEnd) {
                    aHeap.insert(*nxtProc);
                    nxtProc = new Process(nxtProc->getId() + 1);

                    if (!(cin >> *nxtProc)) { //end of input
                        atEnd = true;
                    }
                }

                if (aHeap.getNumItems() == 0) {
                    currTime++;
                } else {
                    curr = aHeap.getMinItem();
                    aHeap.removeMinItem();
                    if (curr.canComplete(currTime)) {
                        currTime = curr.run(currTime);
                        procCnt++;
                    } else {
                        cout << "skipping process id " << curr.getId() << " at " << currTime << endl;
                        skipCnt++;
                        currTime++;
                    }
                }
                //total--;
            }


*/